// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "multibart_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bcfCore
List bcfCore(arma::vec y_, arma::mat Omega_con, arma::mat Omega_mod, arma::mat Omega_con_est, arma::mat Omega_mod_est, NumericVector x_con_, NumericVector x_mod_, NumericVector x_con_est_, NumericVector x_mod_est_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, arma::vec randeff_scales, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, arma::mat Sigma0_con, arma::mat Sigma0_mod, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_name_, bool est_mod_fits, bool est_con_fits, bool prior_sample, bool use_con_scale, bool use_mod_scale, double con_scale_df, double mod_scale_df, int status_interval, bool vanilla, bool dart, NumericVector var_sizes_con, NumericVector var_sizes_mod, NumericVector lower_bd, NumericVector upper_bd, bool probit);
RcppExport SEXP _multibart_bcfCore(SEXP y_SEXP, SEXP Omega_conSEXP, SEXP Omega_modSEXP, SEXP Omega_con_estSEXP, SEXP Omega_mod_estSEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_est_SEXP, SEXP x_mod_est_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP randeff_scalesSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP Sigma0_conSEXP, SEXP Sigma0_modSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_name_SEXP, SEXP est_mod_fitsSEXP, SEXP est_con_fitsSEXP, SEXP prior_sampleSEXP, SEXP use_con_scaleSEXP, SEXP use_mod_scaleSEXP, SEXP con_scale_dfSEXP, SEXP mod_scale_dfSEXP, SEXP status_intervalSEXP, SEXP vanillaSEXP, SEXP dartSEXP, SEXP var_sizes_conSEXP, SEXP var_sizes_modSEXP, SEXP lower_bdSEXP, SEXP upper_bdSEXP, SEXP probitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_con(Omega_conSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_mod(Omega_modSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_con_est(Omega_con_estSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_mod_est(Omega_mod_estSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_est_(x_con_est_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_est_(x_mod_est_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type randeff_scales(randeff_scalesSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0_con(Sigma0_conSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0_mod(Sigma0_modSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    Rcpp::traits::input_parameter< bool >::type est_mod_fits(est_mod_fitsSEXP);
    Rcpp::traits::input_parameter< bool >::type est_con_fits(est_con_fitsSEXP);
    Rcpp::traits::input_parameter< bool >::type prior_sample(prior_sampleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_con_scale(use_con_scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mod_scale(use_mod_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type con_scale_df(con_scale_dfSEXP);
    Rcpp::traits::input_parameter< double >::type mod_scale_df(mod_scale_dfSEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type vanilla(vanillaSEXP);
    Rcpp::traits::input_parameter< bool >::type dart(dartSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_sizes_con(var_sizes_conSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_sizes_mod(var_sizes_modSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bd(lower_bdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper_bd(upper_bdSEXP);
    Rcpp::traits::input_parameter< bool >::type probit(probitSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfCore(y_, Omega_con, Omega_mod, Omega_con_est, Omega_mod_est, x_con_, x_mod_, x_con_est_, x_mod_est_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, randeff_scales, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, Sigma0_con, Sigma0_mod, con_alpha, con_beta, mod_alpha, mod_beta, treef_name_, est_mod_fits, est_con_fits, prior_sample, use_con_scale, use_mod_scale, con_scale_df, mod_scale_df, status_interval, vanilla, dart, var_sizes_con, var_sizes_mod, lower_bd, upper_bd, probit));
    return rcpp_result_gen;
END_RCPP
}
// log_post_cuts
double log_post_cuts(arma::vec cuts_free, arma::vec y, arma::vec mu_vect);
RcppExport SEXP _multibart_log_post_cuts(SEXP cuts_freeSEXP, SEXP ySEXP, SEXP mu_vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type cuts_free(cuts_freeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_vect(mu_vectSEXP);
    rcpp_result_gen = Rcpp::wrap(log_post_cuts(cuts_free, y, mu_vect));
    return rcpp_result_gen;
END_RCPP
}
// rgig
double rgig(double lambda, double chi, double psi);
RcppExport SEXP _multibart_rgig(SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(rgig(lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// gig_norm
double gig_norm(double lambda, double chi, double psi);
RcppExport SEXP _multibart_gig_norm(SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(gig_norm(lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// multibart
List multibart(arma::vec y_, List& bart_specs, List& bart_designs, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, arma::vec randeff_scales, int burn, int nd, int thin, double lambda, double nu, bool return_trees, bool save_trees, bool est_mod_fits, bool est_con_fits, bool prior_sample, int status_interval, NumericVector lower_bd, NumericVector upper_bd, bool ordinal, NumericVector y_obs, NumericVector cutpoints_init, NumericVector basis_params, bool text_trace, bool R_trace, bool return_coefs, arma::vec ugrid_);
RcppExport SEXP _multibart_multibart(SEXP y_SEXP, SEXP bart_specsSEXP, SEXP bart_designsSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP randeff_scalesSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP return_treesSEXP, SEXP save_treesSEXP, SEXP est_mod_fitsSEXP, SEXP est_con_fitsSEXP, SEXP prior_sampleSEXP, SEXP status_intervalSEXP, SEXP lower_bdSEXP, SEXP upper_bdSEXP, SEXP ordinalSEXP, SEXP y_obsSEXP, SEXP cutpoints_initSEXP, SEXP basis_paramsSEXP, SEXP text_traceSEXP, SEXP R_traceSEXP, SEXP return_coefsSEXP, SEXP ugrid_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< List& >::type bart_specs(bart_specsSEXP);
    Rcpp::traits::input_parameter< List& >::type bart_designs(bart_designsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type randeff_scales(randeff_scalesSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type return_trees(return_treesSEXP);
    Rcpp::traits::input_parameter< bool >::type save_trees(save_treesSEXP);
    Rcpp::traits::input_parameter< bool >::type est_mod_fits(est_mod_fitsSEXP);
    Rcpp::traits::input_parameter< bool >::type est_con_fits(est_con_fitsSEXP);
    Rcpp::traits::input_parameter< bool >::type prior_sample(prior_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower_bd(lower_bdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type upper_bd(upper_bdSEXP);
    Rcpp::traits::input_parameter< bool >::type ordinal(ordinalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_obs(y_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cutpoints_init(cutpoints_initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type basis_params(basis_paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type text_trace(text_traceSEXP);
    Rcpp::traits::input_parameter< bool >::type R_trace(R_traceSEXP);
    Rcpp::traits::input_parameter< bool >::type return_coefs(return_coefsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ugrid_(ugrid_SEXP);
    rcpp_result_gen = Rcpp::wrap(multibart(y_, bart_specs, bart_designs, random_des, random_var, random_var_ix, random_var_df, randeff_scales, burn, nd, thin, lambda, nu, return_trees, save_trees, est_mod_fits, est_con_fits, prior_sample, status_interval, lower_bd, upper_bd, ordinal, y_obs, cutpoints_init, basis_params, text_trace, R_trace, return_coefs, ugrid_));
    return rcpp_result_gen;
END_RCPP
}
// unflatten_test
void unflatten_test(Rcpp::List flat_tree);
RcppExport SEXP _multibart_unflatten_test(SEXP flat_treeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type flat_tree(flat_treeSEXP);
    unflatten_test(flat_tree);
    return R_NilValue;
END_RCPP
}
// unflatten_test_predict
void unflatten_test_predict(Rcpp::List flat_tree, List x_info_list);
RcppExport SEXP _multibart_unflatten_test_predict(SEXP flat_treeSEXP, SEXP x_info_listSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type flat_tree(flat_treeSEXP);
    Rcpp::traits::input_parameter< List >::type x_info_list(x_info_listSEXP);
    unflatten_test_predict(flat_tree, x_info_list);
    return R_NilValue;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_tree_samples();

static const R_CallMethodDef CallEntries[] = {
    {"_multibart_bcfCore", (DL_FUNC) &_multibart_bcfCore, 45},
    {"_multibart_log_post_cuts", (DL_FUNC) &_multibart_log_post_cuts, 3},
    {"_multibart_rgig", (DL_FUNC) &_multibart_rgig, 3},
    {"_multibart_gig_norm", (DL_FUNC) &_multibart_gig_norm, 3},
    {"_multibart_multibart", (DL_FUNC) &_multibart_multibart, 29},
    {"_multibart_unflatten_test", (DL_FUNC) &_multibart_unflatten_test, 1},
    {"_multibart_unflatten_test_predict", (DL_FUNC) &_multibart_unflatten_test_predict, 2},
    {"_rcpp_module_boot_tree_samples", (DL_FUNC) &_rcpp_module_boot_tree_samples, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_multibart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
